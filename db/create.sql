-- Recreate Categories and Users first since they have fewer dependencies
CREATE TABLE Categories (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) UNIQUE NOT NULL
);

CREATE TABLE Users (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    email VARCHAR UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    firstname VARCHAR(255) NOT NULL,
    lastname VARCHAR(255) NOT NULL,
    balance NUMERIC DEFAULT 0,
    is_seller BOOLEAN DEFAULT FALSE,
    address TEXT 
);

-- Now recreate Products with the new schema
CREATE TABLE Products (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) UNIQUE NOT NULL,
    description TEXT,
    creator_id INT NOT NULL,
    price DECIMAL(12,2) NOT NULL,
    available BOOLEAN DEFAULT TRUE,
    category VARCHAR(255),
    image_url VARCHAR(255)  -- Adding a column for image URLs
);

-- recreate other tables that depend on Users and Products
CREATE TABLE Purchases (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    uid INT NOT NULL REFERENCES Users(id),
    pid INT NOT NULL REFERENCES Products(id),
    time_purchased timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC')
);

CREATE TABLE Inventory (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    seller_id INT,
    product_id INT,
    quantity INT NOT NULL,
    FOREIGN KEY (seller_id) REFERENCES Users(id),
    FOREIGN KEY (product_id) REFERENCES Products(id),
    CONSTRAINT unique_seller_product UNIQUE (seller_id, product_id)
);

CREATE TABLE Feedback (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INT NOT NULL REFERENCES Users(id),
    product_id INT NOT NULL REFERENCES Products(id),
    rating INT,
    comment VARCHAR(255) NOT NULL,
    time_purchased timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
    CONSTRAINT unique_user_product_feedback UNIQUE (user_id, product_id) -- Enforce unique feedback per user-product
);

CREATE TABLE Carts (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INT NOT NULL UNIQUE REFERENCES Users(id)
);

CREATE TABLE Cart_Items (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    cart_id INT NOT NULL REFERENCES Carts(id),
    product_id INT NOT NULL REFERENCES Products(id),
    seller_id INT NOT NULL REFERENCES Users(id),
    seller_name VARCHAR(255) NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    unit_price DECIMAL(12,2) NOT NULL,
    total_price DECIMAL(12,2) NOT NULL
);

CREATE TABLE Orders (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    order_id INT NOT NULL,
    order_date timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
    product_id INT NOT NULL REFERENCES Products(id),
    buyer_id INT NOT NULL REFERENCES Users(id),
    seller_id INT NOT NULL REFERENCES Users(id),
    seller_name VARCHAR(255) NOT NULL,
    quantity INT NOT NULL CHECK (quantity > 0),
    unit_price DECIMAL(12,2) NOT NULL,
    total_price DECIMAL(12,2) NOT NULL,
    fulfilled BOOLEAN NOT NULL DEFAULT FALSE
);

CREATE TABLE Seller_Reviews (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INT NOT NULL REFERENCES Users(id),
    seller_id INT NOT NULL REFERENCES Users(id),
    rating INT,
    comment VARCHAR(255) NOT NULL,
    time_of_review timestamp without time zone NOT NULL DEFAULT (current_timestamp AT TIME ZONE 'UTC'),
    CONSTRAINT unique_user_seller_feedback UNIQUE (user_id, seller_id) -- Enforce unique feedback per user-seller
);

CREATE TABLE BalanceHistory (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INTEGER REFERENCES Users(id),
    time TIMESTAMP NOT NULL,
    balance NUMERIC(10, 2) NOT NULL
);

CREATE TABLE Coupons (
    id INT NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    code VARCHAR(50) UNIQUE NOT NULL,
    discount_type VARCHAR(20) NOT NULL,
    discount_value DECIMAL(12,2) NOT NULL,
    applicable_product_ids INT[],
    expiration_date TIMESTAMP,
    is_active BOOLEAN DEFAULT TRUE,
    CHECK (
        discount_type IN ('item', 'group', 'cart') AND 
        discount_value > 0
    )
);